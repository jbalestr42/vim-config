#include "MapObject.hpp"
#include "Octo/OctoNoise.hpp"

MapObject::MapObject(unsigned int pn_width, unsigned int pn_height) :
	Map(pn_width, pn_height),
	mn_depth(0)
{}

MapObject::~MapObject(void) { }

void MapObject::initBiome(void)
{
	m_biome->mn_height = 120u;
	m_biome->mn_width = 340u;
	m_biome->mf_transitionTimerMax = 1.0f;
	m_biome->mn_nbDecor = 10u;
}

void MapObject::computeMapRange(int p_startX, int p_endX, int p_startY, int p_endY)
{
	float vec[3];
	int offset;
	float v;

	for (int x = p_startX; x < p_endX; x++)
	{
		for (int y = p_startY; y < p_endY; y++)
		{
			vec[0] = static_cast<float>(offset);
			vec[1] = static_cast<float>(y + mn_offsetY);
			vec[2] = mn_depth;
			// secondCurve return a value between -1 & 1
			m_tiles(x, y)->mf_noiseValue = (secondCurve(vec) + 1.f) / 2.f;
			setColor(*m_tiles(x, y));
		}
	}
}

void MapObjectload(void)
{
	for (int x = 0; x < ; x++)
	{
		for (int y = 0; y < ; y++)
		{
			
		}
	}
}

float MapObject::firstCurve(float * vec)
{
	vec[0] /= 100.f;
	vec[1] /= 100.f;
	return OctoNoise::getCurrent().fbm(vec, 3, 2.0f, 0.4f);
}

float MapObject::secondCurve(float * vec)
{
	vec[0] /= 70.f;
	vec[1] /= 10.f;
	vec[2] /= 10.f;
	return sin(vec[0] * 15.f + OctoNoise::getCurrent().noise3(vec) * sin(vec[1]) * 5.f);
}

void MapObject::setColor(Tile & p_tile)
{
	sf::Color start = sf::Color(178.f, 0.f, 86.f);
	sf::Color end = sf::Color(178.f, 162.f, 32.f);
	p_tile.m_startColor = start;
}

void MapObject::nextStep(void)
{
	mn_depth++;
}

void MapObject::previousStep(void)
{
	mn_depth--;
}
