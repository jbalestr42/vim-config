#ifndef STATICOBJECT_HPP
# define STATICOBJECT_HPP

# include "GameObject/GameObject.hpp"
# include <memory>

# define PI		3.14159265f
# define RADIAN		PI / 180.0f

class Biome;

class StaticObject : public GameObject, public sf::Drawable
{
public:
	StaticObject(void);
	virtual ~StaticObject(void);

	virtual void init(Biome * p_biome);
	virtual void update(float pf_deltatime);
	virtual void draw(sf::RenderTarget & p_target, sf::RenderStates p_states) const;

protected:
	enum ETreeState
	{
		e_treeState_sleep,
		e_treeState_grow,

		e_treeState_nb
	};

	std::unique_ptr<sf::Vertex[]>	m_triangle;
	int				mn_countTriangle;
	ETreeState			me_currentState;
	sf::Vector2f			m_size;
	sf::Color			m_color;
	Biome				*m_biome;

	void  rotateVec(sf::Vector2f *p_point, float p_cosAngle, float p_sinAngle);
	float randomRange(int pn_min, int pn_max);
	float randomRangeTile(int pn_min, int pn_max);
	void  createVertex(sf::Vector2f p_pos, sf::Color const & p_color, int * pn_count);
	void  createRectangle(sf::Vector2f const & p_center, sf::Vector2f const & p_size, sf::Color & p_color, float p_valueColor, int * pn_count,
						 float pf_cos, float pf_sin, sf::Vector2f * p_leftUp = NULL, sf::Vector2f * p_rightUp = NULL);

};

#endif
