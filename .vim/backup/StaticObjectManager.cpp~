#include "StaticObjectManager.hpp"
#include "Map/MapManager.hpp"
#include "GameObject/Tree.hpp"

StaticObjectManager::StaticObjectManager(void)
{
}

StaticObjectManager::~StaticObjectManager(void)
{
	for (int i = 0; i < m_staticObject.size(); i++)
		delete m_staticObject[i];
}

void StaticObjectManager::init(MapManager * p_mapManager, Biome * p_biome)
{
	m_mapManager = p_mapManager;
	m_biome = p_biome;

	// Init decors
	float x;
	for (int i = 0; i < m_biome->mn_nbDecor; i++)
	{
		m_staticObject.push_back(new Tree());
		m_staticObject[i]->init(p_biome);
		x = (m_biome->mn_width / (m_biome->mn_nbDecor + 1)) * i;
		m_staticObject[i]->setPosition(sf::Vector2f(x, m_mapManager->getTransitionManager().getHeight(x)->position.y));
	}
	setPosition();
	m_mapManager->getTransitionManager().computeDecor();
}

void StaticObjectManager::setPosition(void)
{
	for (int i = 0; i < m_staticObject.size(); i++)
		m_staticObject[i]->updatePosition(m_mapManager->getTransitionManager().getHeight(m_staticObject[i]->getPosition().x));
}

void StaticObjectManager::update(float pf_deltatime)
{
	for (int i = 0; i < m_staticObject.size(); i++)
		m_staticObject[i]->update(pf_deltatime);
}

void StaticObjectManager::draw(sf::RenderTarget& render, sf::RenderStates states) const
{
	for (int i = 0; i < m_staticObject.size(); i++)
		render.draw(*m_staticObject[i]);
}
