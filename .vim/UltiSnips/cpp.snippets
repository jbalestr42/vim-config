priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ins
#include <${1}>
endsnippet

snippet in
#include "${1}.hpp"
endsnippet

snippet vec
sf::Vector2f
endsnippet

snippet dc
dynamic_cast<${1:int}>(${2})${3}
endsnippet

snippet sc
static_cast<${1:int}>(${2})${3}
endsnippet

snippet io
#include <iostream>
endsnippet

snippet acc
inline void set${1/\w+\s*/\u$0/}(${2///} ${1/\w+\s*/\l$0/}) { m_${1///} = ${1///}; }
inline ${2} get${1/\w+\s*/\u$0/}(void) const { return m_${1}; }
endsnippet

snippet deb
std::cout << "caca" << std::endl;
endsnippet

snippet cerr
std::cerr << ${1} << std::endl;
endsnippet

snippet cout
std::cout << ${1} << std::endl;
endsnippet

snippet ifnc
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}_HPP
# define ${1:`!p snip.rv = snip.basename.upper()`}_HPP

class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$1(void);
	$1($1 const & ${1/\w+\s*/\l$0/});
	virtual ~$1(void);

	$1 & operator=($1 const & ${1/\w+\s*/\l$0/});

private:

};

#endif
endsnippet

snippet ifn
#ifndef ${1:`!p snip.rv = snip.basename.upper()`}_HPP
# define ${1:`!p snip.rv = snip.basename.upper()`}_HPP

class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$1(void);
	virtual ~$1(void);

private:

};

#endif
endsnippet

snippet clc "class .. (class)"
#include "${1:`!p snip.rv = snip.basename or "name"`}.hpp"

${1:`!p snip.rv = snip.basename or "name"`}::$1(void) { }

$1::~$1(void) { }
endsnippet

snippet clcc "class .. (class)"
#include "${1:`!p snip.rv = snip.basename or "name"`}.hpp"

${1:`!p snip.rv = snip.basename or "name"`}::$1(void) { }

$1::$1($1 const & ${1/\w+\s*/\l$0/})
{
	*this = ${1/\w+\s*/\l$0/};
}

$1::~$1(void) { }

$1 & $1::operator=($1 const & ${1/\w+\s*/\l$0/})
{
	(void)${1/\w+\s*/\l$0/};
	return (*this);
}
endsnippet

snippet seti "setter include"
void set${1:name}(${2:type} ${1/\w+\s*/\l$0/});
endsnippet

snippet setc "setter source"
void ${3:`!p snip.rv = snip.basename or "filename"`}::set${1:name}(${2:type} ${1/\w+\s*/\l$0/})
{
	m_${1/\w+\s*/\l$0/} = ${1/\w+\s*/\l$0/};
}
endsnippet

snippet geti "getter include"
${1:type} get${2:name}(void) const;
endsnippet

snippet getc "getter source"
${1:type} ${3:`!p snip.rv = snip.basename or "filename"`}::get${2:name}(void) const
{
	return (m_${2/\w+\s*/\l$0/});
}
endsnippet

snippet for "for"
for (int ${1:i} = 0; $1 < $2; $1++)
{

}
endsnippet

snippet forr "for"
for (int ${1:x} = 0; $1 < $2; $1++)
{
	for (int ${3:y} = 0; $3 < $4; $3++)
	{
		$5
	}
}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$1(void);
	virtual ~$1(void);

private:

};
endsnippet

snippet cla "class canonic.. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	$1(void);
	$1($1 const & p_${1/\w+\s*/\l$0/});
	virtual ~$1(void);

	$1 & operator=($1 const & p_${1/\w+\s*/\l$0/});

};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

# vim:ft=snippets:
